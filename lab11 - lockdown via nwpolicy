plaintext

//================================================================================
// Context
//================================================================================

Your company, SecuriCorp, uses Kubernetes to run various applications. Recently, 
hackers have attempted to infiltrate the Kubernetes cluster to steal data. 

Currently, all Pods in the cluster can interact over the cluster network. However, 
only specific Pods need to communicate with certain microservices. A particular 
pair of Pods in the web-auth namespace plays a significant role. The "auth-client" 
Pod within this namespace must communicate with another Pod named "web-auth-server" 
in the same namespace.

In this lab, you will secure the Kubernetes cluster further by using NetworkPolicies. 
This will restrict network traffic in the web-auth namespace, ensuring only essential 
traffic flows.

Start by logging into the server using the provided credentials: 
```bash
ssh cloud_user@<PUBLIC_IP_ADDRESS>
//================================================================================
// Task 1: Block Incoming Traffic by Default for All Pods in the web-auth Namespace
//================================================================================

//1 Retrieve all Pods in the web-auth namespace:

#bash

kubectl get pods -n web-auth
//2 Examine the logs for the auth-client Pod:

#bash

kubectl logs auth-client -n web-auth
//3 Create a manifest file named "default-deny-np.yml":

#bash

vi default-deny-np.yml
Insert the following NetworkPolicy into the file:

#yaml

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-ingress
  namespace: web-auth
spec:
  podSelector: {}
  policyTypes:
  - Ingress
After inserting, press Escape and type :wq to save and exit.

//4 Implement the NetworkPolicy:

#bash

kubectl create -f default-deny-np.yml
//5 Review the auth-client Pod logs once again:

#bash

kubectl logs auth-client -n web-auth
(Note: Expect a "Failed to reach auth server!" error message.)

//================================================================================
// Task 2: Permit Traffic from the auth-client Pod to the web-auth-server
//================================================================================

//1 Display all Pods and their labels in the web-auth namespace:

#bash

kubectl get pods -n web-auth --show-labels
//2 Showcase the namespace and its associated label:

#bash

kubectl get namespace web-auth --show-labels
//3 Generate a manifest file named "auth-server-np.yml":

#bash

vi auth-server-np.yml
Insert the following NetworkPolicy into the file:

#yaml

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: auth-server-ingress
  namespace: web-auth
spec:
  podSelector:
    matchLabels:
      app: auth-server
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          role: auth
      podSelector:
        matchLabels:
          app: auth-client
    ports:
    - protocol: TCP
      port: 80
After inserting, press Escape and type :wq to save and exit.

//4 Activate the NetworkPolicy:

#bash

kubectl create -f auth-server-np.yml
//5 Inspect the auth-client logs one more time:

#bash

kubectl logs auth-client -n web-auth
(Note: You should now observe the "Successfully reached auth server!" success message.)



