
//================================================================================
// Context
//================================================================================
This question uses the acgk8s cluster. After logging in to the exam server, 
switch to the correct context with the command kubectl config use-context acgk8s.

Each of the objectives represents a task which you will need to complete 
using the available cluster and server(s). Read each objective carefully 
and complete the task specified.

For some objectives, you may need to ssh into other nodes or servers from t
he exam server. You can do so using the hostname/node name (i.e., ssh acgk8s-worker1).

Note: You cannot ssh into another node, or use kubectl to connect to the cluster, 
from any node other than the root node. Once you have completed the necessary 
tasks on a server, be sure to exit and return to the root node before proceeding.

If you need to assume root privileges on a server, you can do so with sudo -i.

You can run the verification script located at /home/cloud_user/verify.sh 
at any time to check your work!


//================================================================================
// Task 1
//================================================================================

/* ------------------------------- Description ------------------------------ */
# Edit the Web Frontend Deployment to Expose the HTTP Port

In the web namespace, there is a deployment called web-frontend.

Edit this deployment so that the containers within its Pods expose port 80.

/* --------------------------------- Action --------------------------------- */
# Edit the web-frontend Deployment to Expose the HTTP Port

//1 Switch to the appropriate context with kubectl:
kubectl config use-context acgk8s

//2 Edit the web-frontend deployment in the web namespace:
kubectl edit deployment -n web web-frontend

//3 Change the Pod template to expose port 80 on our NGINX containers:

spec:
  containers:
  - image: nginx:1.14.2
    ports:
    - containerPort: 80

//4 Press Esc and enter :wq to save and exit.

//================================================================================
// Task 2
//================================================================================

/* ------------------------------- Description ------------------------------ */
# Create a Service to Expose the Web Frontend Deployment's Pods Externally

Create a service called web-frontend-svc in the web namespace. This service s
hould make the Pods from the web-frontend deployment in the web namespace 
reachable from outside the cluster.

External entities should be able to reach the service by contacting any node 
in the cluster on port 30080.

/* --------------------------------- Action --------------------------------- */
# Create a Service to Expose the web-frontend Deployment's Pods Externally

//1 Open a web-frontend service file:
vi web-frontend-svc.yml

//2 Define the service in the YAML document:
apiVersion: v1
kind: Service
metadata:
  name: web-frontend-svc
  namespace: web
spec:
  type: NodePort
  selector:
    app: web-frontend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
    nodePort: 30080

//   Press Esc and enter :wq to save and exit.

//3 Create the service:
kubectl create -f web-frontend-svc.yml

//================================================================================
// Task 3
//================================================================================

/* ------------------------------- Description ------------------------------ */
# Scale Up the Web Frontend Deployment

Scale the web-frontend deployment in the web namespace up to 5 replicas.
/* --------------------------------- Action --------------------------------- */
# Scale Up the Web Frontend Deployment

//1 Scale up the deployment:
kubectl scale deployment web-frontend -n web --replicas=5

//================================================================================
// Task 4
//================================================================================

/* ------------------------------- Description ------------------------------ */
# Create an Ingress That Maps to the New Service
Create an Ingress called web-frontend-ingress in the web namespace that maps to 
the web-frontend-svc service in the web namespace. The Ingress should map all 
requests on the / path.

/* --------------------------------- Action --------------------------------- */
# Create an Ingress That Maps to the New Service

//1 Create a web-frontend-ingress file:
vi web-frontend-ingress.yml

//2 Define an Ingress in the YAML document:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-frontend-ingress
  namespace: web
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web-frontend-svc
            port:
              number: 80
//   Press Esc and enter :wq to save and exit.

//3 Create the Ingress:
kubectl create -f web-frontend-ingress.yml

