//================================================================================
// Context
//================================================================================
This question uses the acgk8s cluster. After logging in to the exam server, switch 
to the correct context with the command kubectl config use-context acgk8s.

Each of the objectives represents a task which you will need to complete using the 
available cluster and server(s). Read each objective carefully and complete the 
task specified.

For some objectives, you may need to ssh into other nodes or servers from the exam
server. You can do so using the hostname/node name (i.e., ssh acgk8s-worker1).

Note: You cannot ssh into another node, or use kubectl to connect to the cluster, 
from any node other than the root node. Once you have completed the necessary 
tasks on a server, be sure to exit and return to the root node before proceeding.

If you need to assume root privileges on a server, you can do so with sudo -i.

You can run the verification script located at /home/cloud_user/verify.sh at
any time to check your work!


//================================================================================
// Task 1
//================================================================================

/* ------------------------------- Description ------------------------------ */
# Create a Service Account
Create a service account in the web namespace called webautomation.

/* --------------------------------- Action --------------------------------- */
# Create a Service Account

//1 Switch to the appropriate context with kubectl:
kubectl config use-context acgk8s

//2 Create a service account:
kubectl create sa webautomation -n web

//================================================================================
// Task 2
//================================================================================

/* ------------------------------- Description ------------------------------ */
# Create a ClusterRole That Provides Read Access to Pods
Create a ClusterRole called pod-reader that has get, watch, and list access to all Pod

/* --------------------------------- Action --------------------------------- */
# Create a ClusterRole That Provides Read Access to Pods

//1 Create a pod-reader.yml file:
vi pod-reader.yml

//2 Define the ClusterRole:
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
//   Press Esc and enter :wq to save and exit.

//3 Create the ClusterRole:
kubectl create -f pod-reader.yml


//================================================================================
// Task 3
//================================================================================

/* ------------------------------- Description ------------------------------ */
# Bind the ClusterRole to the Service Account to Only Read Pods in the web Namespace
Bind the ClusterRole to the webautomation service account so that it can read all 
Pods, but only in the web namespace.

/* --------------------------------- Action --------------------------------- */
# Bind the ClusterRole to the Service Account to Only Read Pods in the web Namespace

//1 Create the rb-pod-reader.yml file:
vi rb-pod-reader.yml

//2 Define the RoleBinding:
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rb-pod-reader
  namespace: web
subjects:
- kind: ServiceAccount
  name: webautomation
roleRef:
  kind: ClusterRole
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
//   Press Esc and enter :wq to save and exit.

//3 Create the RoleBinding:
kubectl create -f rb-pod-reader.yml

//4 Verify the RoleBinding works:
kubectl get pods -n web --as=system:serviceaccount:web:webautomation
