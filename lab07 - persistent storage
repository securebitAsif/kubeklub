//================================================================================
// Context
//================================================================================
This question uses the acgk8s cluster. After logging in to the exam server, 
switch to the correct context with the command kubectl config use-context acgk8s.

Each of the objectives represents a task that you will need to complete using
the available cluster and server(s). Read each objective carefully and 
complete the task specified.

For some objectives, you may need to ssh into other nodes or servers from the 
exam server. You can do so using the hostname/node name (i.e., ssh acgk8s-worker1).

Note: You cannot ssh in to another node, or use kubectl to connect to the cluster, 
from any node other than the root node. Once you have completed the necessary
tasks on a server, be sure to exit and return to the root node before proceeding.

If you need to assume root privileges on a server, you can do so with sudo -i.

You can run the verification script located at /home/cloud_user/verify.sh at 
any time to check your work!


//================================================================================
// Task 1
//================================================================================

/* ------------------------------- Description ------------------------------ */
# Create a PersistentVolume
Create a PersistentVolume called host-storage-pv with a storage capacity of 1Gi 
in the acgk8s context. Configure this PersistentVolume so that volumes that use 
it can be expanded in the future.
Note: This may require you to create additional objects.

Configure the PersistentVolume to use a hostPath for storage located at /etc/data.
Configure the PersistentVolume so that it can be automatically reused if all claims 
are deleted.


/* --------------------------------- Action --------------------------------- */

# Create a PersistentVolume
//1 Switch to the acgk8s context:
kubectl config use-context acgk8s 

//2 Create a YAML file named localdisk.yml:
vim localdisk.yml

//3 In the file, add the following:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: localdisk
provisioner: kubernetes.io/no-provisioner
allowVolumeExpansion: true

//4 Save the file:
//   Press Esc and enter :wq to save and exit.

//5 Create a storage class using the YAML file:
kubectl create -f localdisk.yml

//6 Create a YAML file named host-storage-pv.yml:
vim host-storage-pv.yml

//7 In the file, add the following:
apiVersion: v1
kind: PersistentVolume
metadata:
  name: host-storage-pv
spec:
  storageClassName: localdisk
  persistentVolumeReclaimPolicy: Recycle
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /etc/data

//8 Save the file:
//   Press Esc and enter :wq to save and exit.

//9 Create the PersistentVolume:
kubectl create -f host-storage-pv.yml

//10 Check the status of the volume:
kubectl get pv host-storage-pv

//11 Check the status of the exam objectives:
./verify.sh


</details>
//================================================================================
// Task 2
//================================================================================

/* ------------------------------- Description ------------------------------ */
# Create a Pod That Uses the PersistentVolume for Storage

Create a Pod called pv-pod in the auth Namespace. Configure this Pod so that it 
uses the host-storage-pv PersistentVolume for storage.
Note: This will require the creation of a PersistentVolumeClaim in the same 
namespace as the Pod.

Name the PersistentVolumeClaim host-storage-pvc. Give your PersistentVolumeClaim 
a size of 100Mi.
Use the busybox image for this Pod, and configure it to run the 
command sh -c while true; do echo success > /output/output.log; sleep 5; done.
Mount the volume that uses the PersistentVolume for storage, such that the 
/output directory ultimately writes to the PersistentVolume.



/* --------------------------------- Action --------------------------------- */


# Create a Pod That Uses the PersistentVolume for Storage
Sure, here's the sequence with the requested enumeration:


//1 Create a YAML file named host-storage-pvc.yml:
vim host-storage-pvc.yml

//2 In the file, paste the following:
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: host-storage-pvc
  namespace: auth
spec:
  storageClassName: localdisk
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

//3 Save the file:
//   Press Esc and enter :wq to save and exit.

//4 Create the PersistentVolumeClaim in the same namespace as the pod:
kubectl create -f host-storage-pvc.yml

//5 Check the status of the PersistentVolumeClaim:
kubectl get pv

//6 Verify that the claim is bound to the volume:
kubectl get pvc -n auth

//7 Create a YAML file named pv-pod.yml:
vim pv-pod.yml

//8 In the file, paste the following:
apiVersion: v1
kind: Pod
metadata:
  name: pv-pod
  namespace: auth
spec:
  containers:
  - name: busybox
    image: busybox
    command: ['sh', '-c', 'while true; do echo success > /output/output.log; sleep 5; done']
    volumeMounts:
    - name: pv-storage
      mountPath: /output
  volumes:
  - name: pv-storage
    persistentVolumeClaim:
      claimName: host-storage-pvc

//9 Save the file:
//   Press Esc and enter :wq to save and exit.

//10 Create the pod:
kubectl create -f pv-pod.yml

//11 Check the status of the exam objectives:
./verify.sh


Feel free to use this enumeration in your documentation!

//================================================================================
// Task 3
//================================================================================

/* ------------------------------- Description ------------------------------ */
# Expand the PersistentVolumeClaim
Expand the PersistentVolumeClaim so that the requested storage size is 200Mi.

/* --------------------------------- Action --------------------------------- */


# Expand the PersistentVolumeClaim
//1 Edit host-storage-pvc:
kubectl edit pvc host-storage-pvc -n auth

//2 Under spec, change the storage value to 200Mi.
//   Press Esc and enter :wq to save and exit.

//3 Check the status of the exam objectives:
./verify.sh


